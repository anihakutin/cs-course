** Aux Space Complexity Rule Of Thumb **
1. Most primitives are constant space( O(1) ), no matter the size of the input(booleans, numbers, undefined, null)
2. String requires O(n) space
3. Reference types are O(n, where n is the length(for arrays) or the number of keys(for objects)


** Logarithms **
1. The Logarithm of a number roughly measures the number of times that you can devide that number by 2 before you get a value that's less then or equal to one.
  8 / 2 = 4
  4 / 2 = 2
  2 / 2 = 1

  O(n2)
  O(n log n)
  O(n)
  O(log n)
  O(1)

  ** Object operations **
  Objects operations are all constant O(1), insertion, removal, access
  except searching which is O(n)
  ** Object Methods **
  Object methods are linear, O(n), keys, values, entries
  except hasOwnProperty O(1)

  ** Arrays **
  Access (by index) O(1)
  Searching O(N)
  Insertion:
  - End of the array O(1)
  - Beginning of array O(n), re-indexing required
  Removal:
  - Beginning of array O(n), re-indexing required
